<?php

namespace AdminBundle\Repository;

use AdminBundle\Entity\Attendee;
use AdminBundle\Entity\Event;
use AdminBundle\Entity\EventType;

/**
 * AttendeeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttendeeRepository extends \Doctrine\ORM\EntityRepository
{
    public function getSelectCountAllAttendees()
    {
        $qb = $this->_em->createQueryBuilder('a');
        $qb->select('count(a.id)')
            ->from('AdminBundle:Attendee', 'a');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getAttendeesFilteredByEvent(
        $searchedNameEmail,
        $searchedEvent,
        $searchedIsSubscribed,
        $numItemsPerPage,
        $page
    ) {
        $selectMailingList = $this->_em->createQueryBuilder('r')
                            ->select('a')
                            ->distinct('a.id')
                            ->from('AdminBundle:Registration', 'r');

        return $this->getSearchByEventQuery($selectMailingList, $searchedNameEmail, $searchedEvent, $searchedIsSubscribed)
                    ->orderBy('a.id', 'ASC')
                    ->setFirstResult(($page - 1) * $numItemsPerPage)
                    ->setMaxResults($numItemsPerPage)
                    ->getQuery()
                    ->getResult();
    }

    public function getCountOfAttendeesFilteredByEvent(
        $searchedNameEmail,
        $searchedEvent,
        $searchedIsSubscribed
    ) {
        $selectCounPages = $this->_em->createQueryBuilder('r')
                            ->select('COUNT(DISTINCT a.id)')
                            ->from('AdminBundle:Registration', 'r');

        return $this->getSearchByEventQuery($selectCounPages, $searchedNameEmail, $searchedEvent, $searchedIsSubscribed)
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    public function getAttendeesFilteredWithoutEvent(
        $searchedNameEmail,
        $searchedIsSubscribed,
        $numItemsPerPage,
        $page
    ) {
        $selectMailingList = $this->_em->createQueryBuilder()
                                ->select('a')
                                ->from('AdminBundle:Attendee', 'a');

        return $this->getSearchByNameEmailQuery($selectMailingList, $searchedNameEmail, $searchedIsSubscribed)
                    ->orderBy('a.id', 'ASC')
                    ->setFirstResult(($page - 1) * $numItemsPerPage)
                    ->setMaxResults($numItemsPerPage)
                    ->getQuery()
                    ->getResult();
    }

    public function getCountOfAttendeesFilteredWithoutEvent(
        $searchedNameEmail,
        $searchedIsSubscribed
    ) {
        $selectCountPages = $this->_em->createQueryBuilder()
                            ->select('count(a.id)')
                            ->from('AdminBundle:Attendee', 'a');

        return $this->getSearchByNameEmailQuery($selectCountPages, $searchedNameEmail, $searchedIsSubscribed)
                    ->getQuery()
                    ->getSingleScalarResult();
    }

    private function getSearchByEventQuery($selectQuery, $nameEmail, $event, $isSubscribed)
    {
        $result = $selectQuery
            ->innerJoin(Attendee::class, 'a', 'WITH', 'a.id = r.attendee')
            ->where('a.email LIKE :name OR a.firstName LIKE :name OR a.lastName LIKE :name')
            ->setParameter('name', '%'.$nameEmail.'%')
            ->innerJoin(Event::class, 'e', 'WITH', 'e.id = r.event')
            ->innerJoin(EventType::class, 'et', 'WITH', 'et.id = e.eventType')
            ->andwhere('et.slug LIKE :event')
            ->setParameter('event', '%'.$event.'%');
        if (true == $isSubscribed) {
            $result->andWhere('a.unsubscribed = :subsc')
            ->setParameter('subsc', !$isSubscribed);
        }

        return $result;
    }

    private function getSearchByNameEmailQuery($selectQuery, $nameEmail, $isSubscribed)
    {
        $result = $selectQuery
            ->where('a.email LIKE :name OR a.firstName LIKE :name OR a.lastName LIKE :name')
            ->setParameter('name', '%'.$nameEmail.'%');
        if (true == $isSubscribed) {
            $result->andWhere('a.unsubscribed = :subsc')
            ->setParameter('subsc', !$isSubscribed);
        }

        return $result;
    }

    public function getSubscribedAttendees()
    {
        $qb = $this->_em->createQueryBuilder('a');
        $qb->select('a')
            ->from('AdminBundle:Attendee', 'a')
            ->where('a.unsubscribed = false');

        return $qb->getQuery()->getResult();
    }
}
